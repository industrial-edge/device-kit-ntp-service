/*
 * Copyright © Siemens 2020 - 2025. ALL RIGHTS RESERVED.
 * Licensed under the MIT license
 * See LICENSE file in the top-level directory
 */

//
// Copyright © Siemens 2020 - 2025. ALL RIGHTS RESERVED.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.6
// source: Ntp.proto

package siemens_iedge_dmapi_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type contains an array of ntp server addresses.
type Ntp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NtpServer     []string               `protobuf:"bytes,1,rep,name=ntpServer,proto3" json:"ntpServer,omitempty"` // array of multiple ntp server address.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ntp) Reset() {
	*x = Ntp{}
	mi := &file_Ntp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ntp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ntp) ProtoMessage() {}

func (x *Ntp) ProtoReflect() protoreflect.Message {
	mi := &file_Ntp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ntp.ProtoReflect.Descriptor instead.
func (*Ntp) Descriptor() ([]byte, []int) {
	return file_Ntp_proto_rawDescGZIP(), []int{0}
}

func (x *Ntp) GetNtpServer() []string {
	if x != nil {
		return x.NtpServer
	}
	return nil
}

// Peer Details from ntpq -p output
type PeerDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RemoteServer  string                 `protobuf:"bytes,1,opt,name=remoteServer,proto3" json:"remoteServer,omitempty"` // NTP server address
	ReferenceID   string                 `protobuf:"bytes,2,opt,name=referenceID,proto3" json:"referenceID,omitempty"`   // Reference id for the NTP server
	Stratum       string                 `protobuf:"bytes,3,opt,name=stratum,proto3" json:"stratum,omitempty"`           // Stratum for the NTP Server
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`                 // Type of server (local, unicast, multicast, or broadcast)
	Poll          int32                  `protobuf:"varint,5,opt,name=poll,proto3" json:"poll,omitempty"`                // How frequently to query server (in seconds)
	When          int32                  `protobuf:"varint,6,opt,name=when,proto3" json:"when,omitempty"`                // How many seconds passed after the last poll.
	Reach         string                 `protobuf:"bytes,7,opt,name=reach,proto3" json:"reach,omitempty"`               // octal bitmask of success or failure of last 8 queries (left-shifted). eg:375
	Delay         float32                `protobuf:"fixed32,8,opt,name=delay,proto3" json:"delay,omitempty"`             // network round trip time (in milliseconds)
	Offset        float32                `protobuf:"fixed32,9,opt,name=offset,proto3" json:"offset,omitempty"`           // difference between local clock and remote clock (in milliseconds)
	Jitter        float32                `protobuf:"fixed32,10,opt,name=jitter,proto3" json:"jitter,omitempty"`          // Difference of successive time values from server (in milliseconds)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerDetails) Reset() {
	*x = PeerDetails{}
	mi := &file_Ntp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDetails) ProtoMessage() {}

func (x *PeerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_Ntp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDetails.ProtoReflect.Descriptor instead.
func (*PeerDetails) Descriptor() ([]byte, []int) {
	return file_Ntp_proto_rawDescGZIP(), []int{1}
}

func (x *PeerDetails) GetRemoteServer() string {
	if x != nil {
		return x.RemoteServer
	}
	return ""
}

func (x *PeerDetails) GetReferenceID() string {
	if x != nil {
		return x.ReferenceID
	}
	return ""
}

func (x *PeerDetails) GetStratum() string {
	if x != nil {
		return x.Stratum
	}
	return ""
}

func (x *PeerDetails) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PeerDetails) GetPoll() int32 {
	if x != nil {
		return x.Poll
	}
	return 0
}

func (x *PeerDetails) GetWhen() int32 {
	if x != nil {
		return x.When
	}
	return 0
}

func (x *PeerDetails) GetReach() string {
	if x != nil {
		return x.Reach
	}
	return ""
}

func (x *PeerDetails) GetDelay() float32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *PeerDetails) GetOffset() float32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PeerDetails) GetJitter() float32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

// Type for ntp current sync status
type Status struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	IsNtpServiceRunning   bool                   `protobuf:"varint,1,opt,name=isNtpServiceRunning,proto3" json:"isNtpServiceRunning,omitempty"`    // indicates that ntp service is running or not
	IsSynced              bool                   `protobuf:"varint,2,opt,name=isSynced,proto3" json:"isSynced,omitempty"`                          // indicates NTP server synced or not
	LastConfigurationTime string                 `protobuf:"bytes,3,opt,name=lastConfigurationTime,proto3" json:"lastConfigurationTime,omitempty"` // time of the last performed iedk ntp configuration.
	LastSyncTime          string                 `protobuf:"bytes,4,opt,name=lastSyncTime,proto3" json:"lastSyncTime,omitempty"`                   // time of the last ntp sync operation.
	PeerDetails           []*PeerDetails         `protobuf:"bytes,5,rep,name=peerDetails,proto3" json:"peerDetails,omitempty"`                     // NTPQ peer information array. Only exist after ntp configuration done.
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_Ntp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_Ntp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_Ntp_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetIsNtpServiceRunning() bool {
	if x != nil {
		return x.IsNtpServiceRunning
	}
	return false
}

func (x *Status) GetIsSynced() bool {
	if x != nil {
		return x.IsSynced
	}
	return false
}

func (x *Status) GetLastConfigurationTime() string {
	if x != nil {
		return x.LastConfigurationTime
	}
	return ""
}

func (x *Status) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *Status) GetPeerDetails() []*PeerDetails {
	if x != nil {
		return x.PeerDetails
	}
	return nil
}

var File_Ntp_proto protoreflect.FileDescriptor

const file_Ntp_proto_rawDesc = "" +
	"\n" +
	"\tNtp.proto\x12\x1asiemens.iedge.dmapi.ntp.v1\x1a\x1bgoogle/protobuf/empty.proto\"#\n" +
	"\x03Ntp\x12\x1c\n" +
	"\tntpServer\x18\x01 \x03(\tR\tntpServer\"\x85\x02\n" +
	"\vPeerDetails\x12\"\n" +
	"\fremoteServer\x18\x01 \x01(\tR\fremoteServer\x12 \n" +
	"\vreferenceID\x18\x02 \x01(\tR\vreferenceID\x12\x18\n" +
	"\astratum\x18\x03 \x01(\tR\astratum\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12\x12\n" +
	"\x04poll\x18\x05 \x01(\x05R\x04poll\x12\x12\n" +
	"\x04when\x18\x06 \x01(\x05R\x04when\x12\x14\n" +
	"\x05reach\x18\a \x01(\tR\x05reach\x12\x14\n" +
	"\x05delay\x18\b \x01(\x02R\x05delay\x12\x16\n" +
	"\x06offset\x18\t \x01(\x02R\x06offset\x12\x16\n" +
	"\x06jitter\x18\n" +
	" \x01(\x02R\x06jitter\"\xfb\x01\n" +
	"\x06Status\x120\n" +
	"\x13isNtpServiceRunning\x18\x01 \x01(\bR\x13isNtpServiceRunning\x12\x1a\n" +
	"\bisSynced\x18\x02 \x01(\bR\bisSynced\x124\n" +
	"\x15lastConfigurationTime\x18\x03 \x01(\tR\x15lastConfigurationTime\x12\"\n" +
	"\flastSyncTime\x18\x04 \x01(\tR\flastSyncTime\x12I\n" +
	"\vpeerDetails\x18\x05 \x03(\v2'.siemens.iedge.dmapi.ntp.v1.PeerDetailsR\vpeerDetails2\xe7\x01\n" +
	"\n" +
	"NtpService\x12G\n" +
	"\fSetNtpServer\x12\x1f.siemens.iedge.dmapi.ntp.v1.Ntp\x1a\x16.google.protobuf.Empty\x12G\n" +
	"\fGetNtpServer\x12\x16.google.protobuf.Empty\x1a\x1f.siemens.iedge.dmapi.ntp.v1.Ntp\x12G\n" +
	"\tGetStatus\x12\x16.google.protobuf.Empty\x1a\".siemens.iedge.dmapi.ntp.v1.StatusB\x1aZ\x18.;siemens_iedge_dmapi_v1b\x06proto3"

var (
	file_Ntp_proto_rawDescOnce sync.Once
	file_Ntp_proto_rawDescData []byte
)

func file_Ntp_proto_rawDescGZIP() []byte {
	file_Ntp_proto_rawDescOnce.Do(func() {
		file_Ntp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_Ntp_proto_rawDesc), len(file_Ntp_proto_rawDesc)))
	})
	return file_Ntp_proto_rawDescData
}

var file_Ntp_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_Ntp_proto_goTypes = []any{
	(*Ntp)(nil),           // 0: siemens.iedge.dmapi.ntp.v1.Ntp
	(*PeerDetails)(nil),   // 1: siemens.iedge.dmapi.ntp.v1.PeerDetails
	(*Status)(nil),        // 2: siemens.iedge.dmapi.ntp.v1.Status
	(*emptypb.Empty)(nil), // 3: google.protobuf.Empty
}
var file_Ntp_proto_depIdxs = []int32{
	1, // 0: siemens.iedge.dmapi.ntp.v1.Status.peerDetails:type_name -> siemens.iedge.dmapi.ntp.v1.PeerDetails
	0, // 1: siemens.iedge.dmapi.ntp.v1.NtpService.SetNtpServer:input_type -> siemens.iedge.dmapi.ntp.v1.Ntp
	3, // 2: siemens.iedge.dmapi.ntp.v1.NtpService.GetNtpServer:input_type -> google.protobuf.Empty
	3, // 3: siemens.iedge.dmapi.ntp.v1.NtpService.GetStatus:input_type -> google.protobuf.Empty
	3, // 4: siemens.iedge.dmapi.ntp.v1.NtpService.SetNtpServer:output_type -> google.protobuf.Empty
	0, // 5: siemens.iedge.dmapi.ntp.v1.NtpService.GetNtpServer:output_type -> siemens.iedge.dmapi.ntp.v1.Ntp
	2, // 6: siemens.iedge.dmapi.ntp.v1.NtpService.GetStatus:output_type -> siemens.iedge.dmapi.ntp.v1.Status
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_Ntp_proto_init() }
func file_Ntp_proto_init() {
	if File_Ntp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_Ntp_proto_rawDesc), len(file_Ntp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Ntp_proto_goTypes,
		DependencyIndexes: file_Ntp_proto_depIdxs,
		MessageInfos:      file_Ntp_proto_msgTypes,
	}.Build()
	File_Ntp_proto = out.File
	file_Ntp_proto_goTypes = nil
	file_Ntp_proto_depIdxs = nil
}
